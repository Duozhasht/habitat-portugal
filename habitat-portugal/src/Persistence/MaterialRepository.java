package Persistence;

import Model.Material;

import java.sql.*;
import java.util.*;

/**
 * Created by Davide on 30/12/2014.
 */

@SuppressWarnings("UnusedDeclaration")
public class MaterialRepository implements Map<Integer, Material> {

    private static final String INSERT_MATERIAL = "insert into material_projecto (quant_necessaria, quant_actual, motivo, projecto_id) values (?,?,?,?)";
    private static final String UPDATE_MATERIAL = "update material_projecto set quant_necessaria = ?, quant_actual = ?, motivo = ?, projecto_id = ? where id_material = ?";

    private static final String DELETE_MATERIAL = "delete from material_projecto where id_material = ?";
    private static final String DELETE_MATERIAIS = "delete from material_projecto";

    private static final String SELECT_MATERIAL = "select * from material_projecto where id_material = ?";
    private static final String SELECT_MATERIAIS = "select * from material_projecto";
    private static final String SELECT_BY_PROJECTO = "select * from material_projecto where projecto_id = ?";

    private static final String COUNT_MATERIAIS = "select count(*) as n from material_projecto";
    private static final String SELECT_IDS = "select id_material from material_projecto";

    private final String url;
    private final String user;
    private final String password;

    public MaterialRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_MATERIAIS)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAL);

            statement.setInt(1, (int) key);

            try (ResultSet result = statement.executeQuery()) {
                return result.next();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {
        return containsKey(((Material) value).getId_material());
    }

    @Override
    public Material get(Object key) {
        Material material = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAL);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    material = new Material();
                    material.setId_material((int) key);
                    material.setQuant_necessaria(result.getString("quant_necessaria"));
                    material.setQuant_actual(result.getString("quant_actual"));
                    material.setMotivo(result.getString("motivo"));
                    material.setProjecto_id(result.getInt("projecto_id"));
                    material.setDoacao(null);
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return material;
    }

    @Override
    public Material put(Integer key, Material value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (key < 0) {
            isUpdate = false;
            query = INSERT_MATERIAL;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_MATERIAL;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1, (value.getQuant_necessaria()));
            statement.setString(2, (value.getQuant_actual()));
            statement.setString(3, (value.getMotivo()));
            statement.setInt(4, (value.getProjecto_id()));

            if (isUpdate) {
                statement.setInt(5, key);
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setId_material(keys.getInt(1));
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Material remove(Object key) {
        Material m = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_MATERIAL);

            statement.setInt(1, (int) key);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return m;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Material> m) {
        for (Material material: m.values()) {
            put(material.getId_material(),material);
        }
    }

    @Override
    public void clear() {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_MATERIAIS);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    s.add(result.getInt(1));
                }
            } finally {
                statement.close();
                connection.close();
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Material> values() {
        ArrayList<Material> r = new ArrayList<>();
        try {
            Material material;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_MATERIAIS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    material = new Material();

                    material.setId_material(result.getInt("id_material"));
                    material.setQuant_necessaria(result.getString("quant_necessaria"));
                    material.setQuant_actual(result.getString("quant_actual"));
                    material.setMotivo(result.getString("motivo"));
                    material.setProjecto_id(result.getInt("projecto_id"));

                    r.add(material);
                }
            }  finally {
                statement.close();
                connection.close();
            }

        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        return r;
    }

    @Override
    public Set<Entry<Integer, Material>> entrySet() {
        return null;
    }

    public Iterable<Material> findByProjecto(int id) {
        List<Material> material = new ArrayList<>();
        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_BY_PROJECTO);

            statement.setInt(1,id);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    if (containsKey(result.getInt("id_material"))) {
                        Material m = get(result.getInt("id_material"));
                        material.add(m);
                    }
                }
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return material;
    }
}
