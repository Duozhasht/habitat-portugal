package Persistence;

import Model.Familiar;

import java.sql.*;

/**
 * @author davide on 06/12/14.
 */

@SuppressWarnings("UnusedDeclaration")
public class FamiliarRepository extends AbstractRepository<Familiar> {

    private static final String INSERT_FAMILIAR = "";
    private static final String UPDATE_FAMILIAR = "";

    private static final String SELECT_FAMILIAR = "";
    private static final String SELECT_FAMILIARES = "";

    private static final String DELETE_FAMILIAR = "";
    private static final String DELETE_FAMILIARES = "";

    private static final String COUNT_FAMILIARES = "";

    private final String url;
    private final String user;
    private final String password;

    public FamiliarRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public void save(Familiar entity) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (entity.getId() < 0) {
            isUpdate = false;
            query = INSERT_FAMILIAR;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_FAMILIAR;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);


            if (isUpdate) {
                statement.setLong(4,entity.getId());
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        entity.setId(keys.getLong(1));
                    }
                }
            } catch (SQLException ex) {
                throw new PersistenceException("Error generating id for family: " + entity);
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error saving family: " + entity, ex);
        }
    }

    @Override
    public Familiar find(long id) throws PersistenceException {
        return null;
    }

    @Override
    public Iterable<Familiar> findAll() throws PersistenceException {
        return null;
    }

    @Override
    public void delete(Familiar entity) throws PersistenceException {

    }

    @Override
    public void deleteAll() throws PersistenceException {

    }

    @Override
    public long count() throws PersistenceException {
        return 0;
    }


}
