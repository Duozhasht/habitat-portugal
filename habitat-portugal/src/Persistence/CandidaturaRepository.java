package Persistence;

import Model.Candidatura;

import java.sql.*;
import java.util.ArrayList;

/**
 * @author davide on 08/12/14.
 */
public class CandidaturaRepository extends AbstractRepository<Candidatura> {

    private static final String INSERT_CANDIDATURA = "INSERT INTO candidatura (nome_candidato, data_nascimento, morada, contacto, estado_civil, escolaridade, profissao, naturalidade, nacionalidade, aprovado) VALUES (?,?,?,?,?,?,?,?,?,?)";

    private static final String UPDATE_CANDIDATURA = "update candidatura set nome_candidato = ?, data_nascimento = ?, morada = ?, contacto = ?, estado_civil = ?, escolaridade = ?, profissao = ?, naturalidade = ?, nacionalidade = ?, aprovado = ? where id = ?";

    private static final String SELECT_CANDIDATURA = "select nome_candidato, data_nascimento, morada, contacto, estado_civil, escolaridade, profissao, naturalidade, nacionalidade, aprovado from candidatura where id = ?";
    private static final String SELECT_CANDIDATURAS = "select id_candidatura, nome_candidato, data_nascimento, morada, contacto, estado_civil, escolaridade, profissao, naturalidade, nacionalidade, aprovado from candidatura";


    private static final String DELETE_CANDIDATURA = "delete from candidatura where id = ?";
    private static final String DELETE_CANDIDATURAS = "delete from candidatura";

    private static final String COUNT_FAMILIARES = "select count(*) as n from candidatura";

    private final String url;
    private final String user;
    private final String password;

    public CandidaturaRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public void save(Candidatura entity) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (entity.getId() < 0) {
            isUpdate = false;
            query = INSERT_CANDIDATURA;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_CANDIDATURA;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,entity.getNome_candidato());
            statement.setString(2,entity.getData_nascimento());
            statement.setString(3,entity.getMorada());
            statement.setString(4,entity.getContacto());
            statement.setString(5,entity.getEstado_civil());
            statement.setString(6,entity.getEscolaridade());
            statement.setString(7,entity.getProfissao());
            statement.setString(8,entity.getNaturalidade());
            statement.setString(9,entity.getNacionalidade());
            statement.setBoolean(10, entity.getAprovado());

            if (isUpdate) {
                statement.setLong(11,entity.getId());
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        entity.setId(keys.getLong(1));
                    }
                }
            } catch (SQLException ex) {
                throw new PersistenceException("Error generating id for candidature: " + entity);
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error saving candidature: " + entity, ex);
        }
    }

    @Override
    public Candidatura find(long id) throws PersistenceException {
        try {
            Candidatura candidatura;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURA);

            statement.setLong(1,id);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    candidatura = new Candidatura();
                    candidatura.setId(id);
                    candidatura.setNome_candidato(result.getString("nome_candidato"));
                    candidatura.setData_nascimento(result.getString("data_nascimento"));
                    candidatura.setMorada(result.getString("morada"));
                    candidatura.setContacto(result.getString("contacto"));
                    candidatura.setEstado_civil(result.getString("estado_civil"));
                    candidatura.setEscolaridade(result.getString("escolaridade"));
                    candidatura.setProfissao(result.getString("profissao"));
                    candidatura.setNaturalidade(result.getString("naturalidade"));
                    candidatura.setNacionalidade(result.getString("nacionalidade"));
                    candidatura.setAprovado(result.getBoolean("aprovado"));
                }
                else {
                    candidatura = null;
                }
            } finally {
                statement.close();
                connection.close();
            }

            return candidatura;

        } catch (SQLException ex) {
            throw new PersistenceException("Error finding candidature: " + id, ex);
        }
    }

    @Override
    public Iterable<Candidatura> findAll() throws PersistenceException {
        try {
            Candidatura candidatura;
            ArrayList<Candidatura> res = new ArrayList<>();

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_CANDIDATURAS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    candidatura = new Candidatura();
                    candidatura.setId(result.getLong("id_candidatura"));
                    candidatura.setNome_candidato(result.getString("nome_candidato"));
                    candidatura.setData_nascimento(result.getString("data_nascimento"));
                    candidatura.setMorada(result.getString("morada"));
                    candidatura.setContacto(result.getString("contacto"));
                    candidatura.setEstado_civil(result.getString("estado_civil"));
                    candidatura.setEscolaridade(result.getString("escolaridade"));
                    candidatura.setProfissao(result.getString("profissao"));
                    candidatura.setNaturalidade(result.getString("naturalidade"));
                    candidatura.setNacionalidade(result.getString("nacionalidade"));
                    candidatura.setAprovado(result.getBoolean("aprovado"));
                    res.add(candidatura);
                }

                }   finally {
                    statement.close();
                    connection.close();
            }

            return res;

        } catch (SQLException ex) {
            throw new PersistenceException("Error finding candidatures:", ex);
        }
    }

    @Override
    public void delete(Candidatura entity) throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_CANDIDATURA);

            statement.setLong(1,entity.getId());

            try {
                int rows = statement.executeUpdate();
                if (rows == 0) {
                    System.out.println("No candidature removed");
                }
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error deleting candidature", ex);
        }
    }

    @Override
    public void deleteAll() throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_CANDIDATURAS);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting candidatures", ex);
        }
    }

    @Override
    public long count() throws PersistenceException {
        try {
            long count;

            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_FAMILIARES)) {
                if (resultSet.next())
                    count = resultSet.getLong("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            throw new PersistenceException("Error counting candidatures", ex);
        }
    }
}
