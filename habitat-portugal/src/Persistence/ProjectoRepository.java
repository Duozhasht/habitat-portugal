package Persistence;

import Model.Projecto;

import java.sql.*;
import java.util.*;

/**
 * @author davide on 17/12/14.
 */

@SuppressWarnings("UnusedDeclaration")
public class ProjectoRepository implements Map<Integer, Projecto> {

    private static final String INSERT_PROJECTO = "insert into projecto (nome_projecto, data_inicio, data_final, custo_inicio, custo_final , classificacao, estado) values (?,?,?,?,?,?,?)";
    private static final String UPDATE_PROJECTO = "update projecto set nome_projecto = ?, data_inicio = ?, data_final = ?, custo_inicio = ?, custo_final  = ?, classificacao = ?, estado = ? where id_projecto = ?";

    private static final String SELECT_PROJECTO = "select nome_projecto, data_inicio, data_final, custo_inicio, custo_final , classificacao, estado from projecto where id_projecto = ?";
    private static final String SELECT_PROJECTOS = "select id_projecto, nome_projecto, data_inicio, data_final, custo_inicio, custo_final , classificacao, estado from projecto";

    private static final String DELETE_PROJECTO = "delete from projecto where id_projecto = ?";
    private static final String DELETE_PROJECTOS = "delete from projecto";

    private static final String COUNT_PROJECTOS = "select count(*) as n from projecto";
    private static final String SELECT_IDS = "select id_projecto from projecto";

    private final String url;
    private final String user;
    private final String password;

    public ProjectoRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_PROJECTOS)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTO);

            statement.setInt(1, (int) key);

            try (ResultSet result = statement.executeQuery()) {
                return result.next();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {
        return containsKey(((Projecto) value).getId());
    }

    @Override
    public Projecto get(Object key) {
        Projecto projecto = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTO);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    projecto = new Projecto();

                    projecto.setId((int) key);
                    projecto.setNome_projecto(result.getString("nome_projecto"));
                    projecto.setData_inicio(result.getDate("data_inicio"));
                    projecto.setData_final(result.getDate("data_final"));
                    projecto.setCusto_inicio(result.getInt("custo_inicial"));
                    projecto.setCusto_final(result.getInt("custo_final"));
                    projecto.setClassificacao(result.getString("classificacao"));
                    projecto.setEstado(result.getString("estado"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return projecto;
    }

    @Override
    public Projecto put(Integer key, Projecto value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (key < 0) {
            isUpdate = false;
            query = INSERT_PROJECTO;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_PROJECTO;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1, (value.getNome_projecto()));
            statement.setDate(2, (value.getData_inicio()));
            statement.setDate(3, (value.getData_final()));
            statement.setInt(4, (value.getCusto_inicio()));
            statement.setInt(5, (value.getCusto_final()));
            statement.setString(6,(value.getClassificacao()));
            statement.setString(7, (value.getEstado()));

            if (isUpdate) {
                statement.setLong(8,key);
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setId(keys.getInt(1));
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Projecto remove(Object key) {
        Projecto p = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_PROJECTO);

            statement.setInt(1, (int) key);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return p;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Projecto> m) {
        for (Projecto p: m.values()) {
            put(p.getId(),p);
        }
    }

    @Override
    public void clear() {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_PROJECTOS);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    s.add(result.getInt(1));
                }
            } finally {
                statement.close();
                connection.close();
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Projecto> values() {
        ArrayList<Projecto> r = new ArrayList<>();
        try {
            Projecto projecto;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_PROJECTOS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    projecto = new Projecto();

                    projecto.setId(result.getInt("id_projecto"));
                    projecto.setNome_projecto(result.getString("nome_projecto"));
                    projecto.setData_inicio(result.getDate("data_inicio"));
                    projecto.setData_final(result.getDate("data_final"));
                    projecto.setCusto_inicio(result.getInt("custo_inicio"));
                    projecto.setCusto_final(result.getInt("custo_final"));
                    projecto.setClassificacao(result.getString("classificacao"));
                    projecto.setEstado(result.getString("estado"));
                    projecto.setCandidatura(result.getInt("candidatura_id"));

                    r.add(projecto);
                }
            }  finally {
                statement.close();
                connection.close();
            }

        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        return r;
    }

    @Override
    public Set<Entry<Integer, Projecto>> entrySet() {
        return null;
    }

}
