package Persistence;

import Model.Grupo;

import java.sql.*;
import java.util.*;

/**
 * @author davide on 21/12/14.
 */

@SuppressWarnings("UnusedDeclaration")
public class GrupoRepository implements Map<Integer, Grupo> {

    private static final String INSERT_GRUPO = "insert into grupo (nome_grupo, motivo, data_criacao, data_final, notas) values (?,?,?,?,?)";
    private static final String UPDATE_GRUPO = "update grupo set nome_grupo = ?, motivo = ?, data_criacao = ?, data_final = ?, notas = ? where id_grupo = ?";

    private static final String SELECT_GRUPO = "select * from grupo where id_grupo = ?";
    private static final String SELECT_GRUPOS = "select * from grupo";

    private static final String DELETE_GRUPO = "delete from grupo where id_grupo = ?";
    private static final String DELETE_GRUPOS = "delete from grupo";

    private static final String COUNT_GRUPOS = "select count(*) as n from grupo";
    private static final String SELECT_IDS = "select id_grupo from grupo";

    private static final String INSERE_VOLUNTARIO_GRUPO = "insert into grupo_voluntario (id_voluntario, id_grupo) values (?,?)";
    private static final String REMOVE_VOLUNTARIO_GRUPO = "delete from grupo_voluntario where id_voluntario = ? and id_grupo = ?";

    private final String url;
    private final String user;
    private final String password;

    public GrupoRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();

            try (ResultSet result = statement.executeQuery(COUNT_GRUPOS)) {
                if (result.next()) {
                    count = result.getInt("n");
                } else {
                    count = -1;
                }
            } finally {
                statement.close();
                connection.close();
            }
            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_GRUPO);

            statement.setInt(1,(int) key);

            try {
                ResultSet resultSet = statement.executeQuery();
                return resultSet.next();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {
        return containsKey(((Grupo) value).getId_grupo());
    }

    @Override
    public Grupo get(Object key) {
        Grupo grupo = null;

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_GRUPO);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    grupo = new Grupo();

                    grupo.setId_grupo((int) key);
                    grupo.setNome_grupo(result.getString("nome_grupo"));
                    grupo.setMotivo(result.getString("motivo"));
                    grupo.setData_criacao(result.getDate("data_criacao"));
                    grupo.setData_final(result.getDate("data_final"));
                    grupo.setNotas(result.getString("notas"));

                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return grupo;
    }

    @Override
    public Grupo put(Integer key, Grupo value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (key < 0) {
            isUpdate = false;
            query = INSERT_GRUPO;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_GRUPO;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,(value.getNome_grupo()));
            statement.setString(2,(value.getMotivo()));
            statement.setDate(3,(value.getData_criacao()));
            statement.setDate(4,(value.getData_final()));
            statement.setString(5,(value.getNotas()));

            if (isUpdate) {
                statement.setLong(6,key);
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setId_grupo(keys.getInt(1));
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Grupo remove(Object key) {
        Grupo grupo = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_GRUPO);

            statement.setInt(1, (int) key);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return grupo;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Grupo> m) {
        for (Grupo g : m.values()) {
            put(g.getId_grupo(),g);
        }
    }

    @Override
    public void clear() {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_GRUPOS);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    s.add(result.getInt(1));
                }
            } finally {
                statement.close();
                connection.close();
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Grupo> values() {
        ArrayList<Grupo> r = new ArrayList<>();
        try {
            Grupo grupo;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_GRUPOS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    grupo = new Grupo();

                    grupo.setId_grupo(result.getInt("id_grupo"));
                    grupo.setNome_grupo(result.getString("nome_grupo"));
                    grupo.setMotivo(result.getString("motivo"));
                    grupo.setData_criacao(result.getDate("data_criacao"));
                    grupo.setData_final(result.getDate("data_final"));
                    grupo.setNotas(result.getString("notas"));

                    r.add(grupo);
                }
            }  finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        return r;
    }

    @Override
    public Set<Entry<Integer, Grupo>> entrySet() {
        return null;
    }

    public void insereVoluntarioGrupo(int idVoluntario, int idGrupo) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(INSERE_VOLUNTARIO_GRUPO);

            statement.setInt(1,idVoluntario);
            statement.setInt(2,idGrupo);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void removeVoluntarioGrupo (int idVoluntario, int idGrupo) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(REMOVE_VOLUNTARIO_GRUPO);

            statement.setInt(1,idVoluntario);
            statement.setInt(2,idGrupo);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
