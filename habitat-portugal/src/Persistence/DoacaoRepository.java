package Persistence;

import Model.Doacao;

import java.sql.*;
import java.util.*;

/**
 * @author davide on 20/12/14.
 */

@SuppressWarnings("UnusedDeclaration")
public class DoacaoRepository implements Map<Integer, Doacao> {

    private static final String INSERT_DOACAO_EVENTO = "insert into doacao (descricao, quantidade, tipo, doador_id, evento_id) values (?,?,?,?,?)";
    private static final String UPDATE_DOACAO_EVENTO = "update doacao set descricao = ?, quantidade = ?, tipo = ?, doador_id = ?, evento_id = ? where id_doacao = ?";

    private static final String INSERT_DOACAO = "insert into doacao (descricao, quantidade, tipo, doador_id) values (?,?,?,?)";
    private static final String UPDATE_DOACAO = "update doacao set descricao = ?, quantidade = ?, tipo = ?, doador_id = ? where id_doacao = ?";

    private static final String SELECT_DOACAO = "select * from doacao where id_doacao = ?";
    private static final String SELECT_DOACOES = "select * from doacao";
    private static final String SELECT_BY_DOADOR = "select * from doacao where doador_id = ?";

    private static final String DELETE_DOACAO = "delete from doacao where id_doacao = ?";
    private static final String DELETE_DOACOES = "delete from doacao";

    private static final String COUNT_DOACOES = "select count(*) as n from doacao";
    private static final String SELECT_IDS = "select id_doacao from doacao";

    private final String url;
    private final String user;
    private final String password;

    public DoacaoRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_DOACOES)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_DOACAO);

            statement.setInt(1, (int) key);

            try (ResultSet result = statement.executeQuery()) {
                return result.next();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) { return containsKey(((Doacao) value).getId_doacao()); }

    @Override
    public Doacao get(Object key) {
        Doacao doacao = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_DOACAO);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    doacao = new Doacao();
                    doacao.setId_doacao((int) key);
                    doacao.setDescricao(result.getString("descricao"));
                    doacao.setQuantidade(result.getString("quantidade"));
                    doacao.setTipo(result.getString("tipo"));
                    doacao.setDoador(result.getInt("doador_id"));
                    doacao.setEvento(result.getInt("evento_id"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return doacao;
    }

    @Override
    public Doacao put(Integer key, Doacao value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate, isEvento;
        if (key < 0) {
            isUpdate = false;
            if (value.getEvento() < 0) {
                isEvento = false;
                query = INSERT_DOACAO;
            } else {
                isEvento = true;
                query = INSERT_DOACAO_EVENTO;
            }
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            if (value.getEvento() < 0) {
                isEvento = false;
                query = UPDATE_DOACAO;
            } else {
                isEvento = true;
                query = UPDATE_DOACAO_EVENTO;
            }
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,(value.getDescricao()));
            statement.setString(2,(value.getQuantidade()));
            statement.setString(3,(value.getTipo()));
            statement.setInt(4,(value.getDoador()));

            if (isEvento) {
                statement.setInt(5, value.getEvento());
            }

            if (isUpdate && isEvento) {
                statement.setInt(6,value.getId_doacao());
            }
            else {
                statement.setInt(5,value.getId_doacao());
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setId_doacao(keys.getInt(1));
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Doacao remove(Object key) {
        Doacao d = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_DOACAO);

            statement.setInt(1, (int) key);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return d;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Doacao> m) {
        for (Doacao d: m.values()) {
            put(d.getId_doacao(),d);
        }
    }

    @Override
    public void clear() {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_DOACOES);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    s.add(result.getInt(1));
                }
            } finally {
                statement.close();
                connection.close();
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Doacao> values() {
        ArrayList<Doacao> r = new ArrayList<>();
        try {
            Doacao doacao;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_DOACOES);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    doacao = new Doacao();

                    doacao.setId_doacao(result.getInt("id_doacao"));
                    doacao.setDescricao(result.getString("descricao"));
                    doacao.setQuantidade(result.getString("quantidade"));
                    doacao.setTipo(result.getString("tipo"));
                    doacao.setDoador(result.getInt("doador_id"));
                    doacao.setEvento(result.getInt("evento_id"));

                    r.add(doacao);
                }
            }  finally {
                statement.close();
                connection.close();
            }

        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        return r;
    }

    @Override
    public Set<Entry<Integer, Doacao>> entrySet() {
        return null;
    }

    public Iterable<Doacao> findByCandidatura(int id) {
        List<Doacao> doacoes = new ArrayList<>();
        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_BY_DOADOR);

            statement.setInt(1,id);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    if (containsKey(result.getInt("id_doador"))) {
                        Doacao doacao = get(result.getInt("id_doador"));
                        doacoes.add(doacao);
                    }
                }
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return doacoes;
    }
}
