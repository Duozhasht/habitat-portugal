package Persistence;

import Model.Utilizador;

import java.sql.*;
import java.util.ArrayList;

/**
 *
 * UtilizadorRepository
 *
 * @author Davide Silva
 *
 */

public class UtilizadorRepository extends AbstractRepository<Utilizador> {

    private static final String INSERT_UTILIZADOR = "insert into utilizador (nome_utilizador, password, conta) values (?,?,?)";
    private static final String UPDATE_UTILIZADOR = "update utilizador set nome_utilizador = ?, password = ?, conta = ? where id = ?";

    private static final String SELECT_UTILIZADOR = "select nome_utilizador, password, conta from utilizador where id = ?";
    private static final String SELECT_UTILIZADORES = "select id, nome_utilizador, password, conta from utilizador";

    private static final String DELETE_UTILIZADOR = "delete from utilizador where id = ?";
    private static final String DELETE_UTILIZADORES = "delete from utilizador";

    private static final String COUNT_UTILIZADORES = "select count(*) as n from utilizador";

    private final String url;
    private final String user;
    private final String password;

    public UtilizadorRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public void save(Utilizador utilizador) throws PersistenceException {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (utilizador.getId() < 0) {
            isUpdate = false;
            query = INSERT_UTILIZADOR;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_UTILIZADOR;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,utilizador.getNome());
            statement.setString(2,utilizador.getPassword());
            statement.setInt(3,utilizador.getConta());

            if (isUpdate) {
                statement.setLong(4,utilizador.getId());
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        utilizador.setId(keys.getLong(1));
                        }
                    }
            } catch (SQLException ex) {
                throw new PersistenceException("Error generating id for user: " + utilizador);
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            throw new PersistenceException("Error saving user: " + utilizador, ex);
        }
    }

    @Override
    public Utilizador find(long id) throws PersistenceException {
        try {
            Utilizador utilizador;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_UTILIZADOR);

            statement.setLong(1,id);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    utilizador = new Utilizador();
                    utilizador.setId(id);
                    utilizador.setNome(result.getString("nome_utilizador"));
                    utilizador.setPassword(result.getString("password"));
                    utilizador.setConta(result.getInt("conta"));
                }
                else {
                    utilizador = null;
                }
            } finally {
                statement.close();
                connection.close();
            }

            return utilizador;

        } catch (SQLException ex) {
            throw new PersistenceException("Error finding user: " + id, ex);
        }
    }

    @Override
    public Iterable<Utilizador> findAll() throws PersistenceException {
        try {
            Utilizador utilizador;
            ArrayList<Utilizador> r = new ArrayList<>();

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_UTILIZADORES);

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    utilizador = new Utilizador();
                    utilizador.setId(resultSet.getLong("id"));
                    utilizador.setNome(resultSet.getString("nome_utilizador"));
                    utilizador.setPassword(resultSet.getString("password"));
                    utilizador.setConta(resultSet.getInt("conta"));

                    r.add(utilizador);
                }
            }  finally {
                statement.close();
                connection.close();
            }

            return r;

        }
        catch (SQLException ex) {
            throw new PersistenceException("Error finding users", ex);
        }
    }

    @Override
    public void delete(Utilizador utilizador) throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_UTILIZADOR);

            statement.setLong(1,utilizador.getId());

            try {
                int rows = statement.executeUpdate();
                if (rows == 0) {
                    System.out.println("No users removed");
                }
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            throw new PersistenceException("Error deleting user", ex);
        }
    }

    @Override
    public void deleteAll() throws PersistenceException {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();

            try {
                statement.executeUpdate(DELETE_UTILIZADORES);
            }
            finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            throw new PersistenceException("Error deleting users", ex);
        }
    }

    @Override
    public long count() throws PersistenceException {
        try {
            long count;

            Connection connection = DriverManager.getConnection(url,user,password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_UTILIZADORES)) {
                if (resultSet.next())
                    count = resultSet.getLong("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            throw new PersistenceException("Error counting users", ex);
        }
    }
}
