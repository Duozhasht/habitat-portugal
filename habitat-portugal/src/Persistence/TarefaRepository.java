package Persistence;

import Model.Tarefa;

import java.sql.*;
import java.util.*;

/**
 * @author davide on 17/12/14.
 */

@SuppressWarnings("UnusedDeclaration")
public class TarefaRepository implements Map<Integer, Tarefa> {

    private static final String INSERT_TAREFA = "insert into tarefa (nome_tarefa, data_inicio, data_final , id_encarregado) values (?,?,?,?)";
    private static final String UPDATE_TAREFA = "update tarefa set nome_tarefa = ?, data_inicio = ?, data_final = ?, id_encarregado = ? where id_tarefa = ?";

    private static final String SELECT_TAREFA = "select nome_tarefa, data_inicio, data_final, id_encarregado from tarefa where id_tarefa = ?";
    private static final String SELECT_TAREFAS = "select id_tarefa, nome_tarefa, data_inicio, data_final, id_encarregado from tarefa";
    private static final String SELECT_BY_VOLUNTARIO = "select id_tarefa from voluntario_tarefa where id_voluntario = ?";

    private static final String DELETE_TAREFA = "delete from tarefa where id_tarefa = ?";
    private static final String DELETE_TAREFAS = "delete from tarefa";

    private static final String COUNT_TAREFAS = "select count(*) as n from tarefa";
    private static final String SELECT_IDS = "select id_tarefa from tarefa";


    private final String url;
    private final String user;
    private final String password;

    public TarefaRepository(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public int size() {
        try {
            int count;

            Connection connection = DriverManager.getConnection(url, user, password);
            Statement statement = connection.createStatement();

            try (ResultSet resultSet = statement.executeQuery(COUNT_TAREFAS)) {
                if (resultSet.next())
                    count = resultSet.getInt("n");
                else
                    count = -1;
            } finally {
                statement.close();
                connection.close();
            }

            return count;

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean containsKey(Object key) {
        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_TAREFA);

            statement.setInt(1, (int) key);

            try (ResultSet result = statement.executeQuery()) {
                return result.next();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean containsValue(Object value) {
        return containsKey(((Tarefa) value).getId());
    }

    @Override
    public Tarefa get(Object key) {
        Tarefa tarefa = null;
        try {

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_TAREFA);

            statement.setInt(1,(int) key);

            try (ResultSet result = statement.executeQuery()) {
                if (result.next()) {
                    tarefa = new Tarefa();
                    tarefa.setId((int) key);
                    tarefa.setNome_tarefa(result.getString("nome_tarefa"));
                    tarefa.setData_inicio(result.getString("data_inicio"));
                    tarefa.setData_final(result.getString("data_final"));
                    tarefa.setId_encarregado(result.getInt("id_encarregado"));
                }
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return tarefa;
    }

    @Override
    public Tarefa put(Integer key, Tarefa value) {
        String query;
        int autoGeneratedKeys;
        boolean isUpdate;
        if (key < 0) {
            isUpdate = false;
            query = INSERT_TAREFA;
            autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;
        }
        else {
            isUpdate = true;
            query = UPDATE_TAREFA;
            autoGeneratedKeys = Statement.NO_GENERATED_KEYS;
        }

        try {
            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(query,autoGeneratedKeys);

            statement.setString(1,(value.getNome_tarefa()));
            statement.setString(2,(value.getData_inicio()));
            statement.setString(3,(value.getData_final()));
            statement.setInt(4, (value.getId_encarregado()));

            if (isUpdate) {
                statement.setLong(5,key);
            }

            statement.executeUpdate();

            try {
                if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                    ResultSet keys = statement.getGeneratedKeys();
                    if (keys != null && keys.next()) {
                        value.setId(keys.getInt(1));
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                statement.close();
                connection.close();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return value;
    }

    @Override
    public Tarefa remove(Object key) {
        Tarefa t = get(key);
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(DELETE_TAREFA);

            statement.setInt(1, (int) key);

            try {
                statement.executeUpdate();
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return t;
    }

    @Override
    public void putAll(Map<? extends Integer, ? extends Tarefa> m) {
        for(Tarefa t : m.values()) {
            put(t.getId(),t);
        }
    }

    @Override
    public void clear() {
        try {
            Connection connection = DriverManager.getConnection(url, user, password);

            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate(DELETE_TAREFAS);
            } finally {
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public Set<Integer> keySet() {
        Set<Integer> s = new HashSet<>();

        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_IDS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    s.add(result.getInt(1));
                }
            } finally {
                statement.close();
                connection.close();
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return s;
    }

    @Override
    public Collection<Tarefa> values() {
        ArrayList<Tarefa> r = new ArrayList<>();
        try {
            Tarefa tarefa;

            Connection connection = DriverManager.getConnection(url,user,password);
            PreparedStatement statement = connection.prepareStatement(SELECT_TAREFAS);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    tarefa = new Tarefa();

                    tarefa.setId(result.getInt("id_tarefa"));
                    tarefa.setNome_tarefa(result.getString("nome_tarefa"));
                    tarefa.setData_inicio(result.getString("data_inicio"));
                    tarefa.setData_final(result.getString("data_final"));
                    tarefa.setId_encarregado(result.getInt("id_encarregado"));

                    r.add(tarefa);
                }
            }  finally {
                statement.close();
                connection.close();
            }
        }
        catch (SQLException ex) {
            ex.printStackTrace();
        }

        return r;
    }

    @Override
    public Set<Entry<Integer, Tarefa>> entrySet() {
        return null;
    }

    public Iterable<Tarefa> findByVoluntario(int id) {
        List<Tarefa> lista = new ArrayList<>();
        try {

            Connection connection = DriverManager.getConnection(url, user, password);
            PreparedStatement statement = connection.prepareStatement(SELECT_BY_VOLUNTARIO);

            statement.setLong(1,id);

            try (ResultSet result = statement.executeQuery()) {
                while (result.next()) {
                    if (containsKey(result.getInt("id_tarefa"))) {
                        Tarefa tarefa = get(result.getInt("id_tarefa"));
                        lista.add(tarefa);
                    }
                }
            } finally {
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return lista;
    }
}
